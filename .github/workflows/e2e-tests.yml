# GitHub Actions 工作流程 - 简化的 CI/CD 流水线

name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgres://test_user:test_password@localhost:5432/chatroom_test
  REDIS_URL: redis://localhost:6379

jobs:
  # 核心测试 - 合并所有检查到一个 job
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: chatroom_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests
      run: cargo test --workspace --lib --bins

    - name: Run integration tests
      run: cargo test -p tests integration_test jwt_integration

    - name: Run E2E tests (if available)
      run: |
        # 只有当 E2E 测试存在时才运行
        if cargo test -p tests --list | grep -q e2e_tests; then
          cargo test -p tests e2e_tests -- --test-threads=1
        else
          echo "No E2E tests found, skipping"
        fi
      timeout-minutes: 10

    - name: Generate coverage report
      run: |
        # 如果安装了 tarpaulin，生成覆盖率报告
        if command -v cargo-tarpaulin &> /dev/null; then
          cargo install cargo-tarpaulin
          cargo tarpaulin --workspace --timeout 60 --out Html \
            --exclude-files "src/main.rs" "*/tests/*" "*/benches/*"
        else
          echo "tarpaulin not available, skipping coverage"
        fi

    - name: Upload coverage results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: tarpaulin-report.html

  # 部署检查
  deploy-check:
    name: Deploy Check
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Check deployment readiness
      run: |
        echo "✅ All tests passed - ready for deployment"
        echo "Deployment would proceed here in a real pipeline"